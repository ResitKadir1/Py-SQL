Q-13--> Query the Name of any student in STUDENTS who scored higher than 75  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.


A-13-->

SELECT Name
FROM Students
WHERE Marks > 75
ORDER BY SUBSTR(Name, - 3), ID ASC;


Q-14--> Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

A-14--> 

select name
from Employee
order by name ASc;

Q-15--> Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater 2000 than  per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

A-15)

select name
from Employee
where salary > 2000 and months<10
order by employee_id asc;


Q-15--> Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.

A-15-

SELECT ROUND(LONG_W, 4)
FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1;


Q-16--> Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.

A-16->

select round(min(lat_n),4)
from station
where lat_n > 38.7780;



Q-17--> Query a count of the number of cities in CITY having a Population larger than .

A-17-->
select count(Distinct(name))
from city
where population > 100000;



Q-18 Query the total population of all cities in CITY where District is California.

A-18 --> 

select sum(population)
from city
where district ="california";


Q-19--> Query the average population of all cities in CITY where District is California.

A-19--> 
select avg(population)
from city
where district ="california";


Q-20--> Query the average population for all cities in CITY, rounded down to the nearest integer.
A-20--> 
select round(avg(population),2)
from city;


Q-21--> Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

A-21-->

select sum(population)
from city
where countrycode ='JPN';





Q-22-->


Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.


Sample Output

Isosceles
Equilateral
Scalene
Not A Triangle



Explanation

Values in the tuple(20,20,23)  form an Isosceles triangle, because A≡B .
Values in the tuple (20,20,20) form an Equilateral triangle, because A≡B≡C . Values in the tuple (20,21,22) form a Scalene triangle, because not A≡B≡C.
Values in the tuple(13,14,30)  cannot form a triangle because the combined value of sides A and B  is not larger than that of side C .



A-22--->


-- 'CASE' goes through conditions and return a value when the first condition is met (like an IF-ELSE statement). So, once a condition is true, it will stop reading and return the result.
-- If no conditions are true, it will return the value in the ELSE clause.
-- If there is no ELSE part and no conditions are true, it returns NULL.



SELECT
CASE
    WHEN A + B <= C OR A + C <= B OR B + C <= A
        THEN 'Not A Triangle'
    WHEN A = B AND A = C AND B = C
        THEN 'Equilateral'
    WHEN A = B OR A = C OR B = C
        THEN 'Isosceles'
    ELSE 'Scalene'
END
FROM TRIANGLES;




Q-23-->

Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.:actual -misscalculate  average monthly salaries), and round it up to the next integer.


A-23-->

SELECT CEILING((SUM(Salary) - SUM(REPLACE(Salary, '0', ""))) / COUNT(*))
FROM EMPLOYEES;



Q-24--> We define an employee's total earnings to be their monthly salary*months  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.


Sample Output

69952 1



A-24-->


SELECT salary * months, COUNT(*)
FROM Employee
GROUP BY 1
ORDER BY 1 DESC 
LIMIT 1;