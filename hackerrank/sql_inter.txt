Q-1--> Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.



##-- CONCAT() function adds two or more expressions together

A-1--> 


SELECT CONCAT(NAME, "(", LEFT(Occupation , 1), ")")
FROM OCCUPATIONS
ORDER BY NAME ASC;

SELECT CONCAT("There are a total of ", COUNT(Occupation), ' ', LOWER(Occupation), "s.")
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY COUNT(Occupation), Occupation ASC;






Q-2--->



Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.

Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor.


Explanation

The first column is an alphabetically ordered list of Doctor names.
The second column is an alphabetically ordered list of Professor names.
The third column is an alphabetically ordered list of Singer names.
The fourth column is an alphabetically ordered list of Actor names.
The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values.


#####

Sample Output

Jenny    Ashley     Meera  Jane
Samantha Christeen  Priya  Julia
NULL     Ketty      NULL   Maria

######


A-2-->



SET @d=0, @a=0, @p=0, @s=0;
SELECT MIN(Doctor), MIN(Professor), MIN(Singer), MIN(Actor)
FROM
       (SELECT
              CASE Occupation
                     WHEN 'Doctor'
                            THEN @d:=@d+1
                     WHEN 'Professor'
                            THEN @a:=@a+1
                     WHEN 'Singer'
                            THEN @p:=@p+1
                     WHEN 'Actor'
                            THEN @s:=@s+1
              END AS RowLine,
              CASE
                     WHEN Occupation = 'Doctor'
                            THEN Name
              END AS Doctor,
              CASE
                     WHEN Occupation = 'Professor'
                            THEN Name
              END AS Professor,
              CASE
                     WHEN Occupation = 'Singer'
                            THEN Name
              END AS Singer,
              CASE
                     WHEN Occupation = 'Actor'
                            THEN Name
              END AS Actor
              FROM OCCUPATIONS
       ORDER BY Name) AS t
GROUP BY RowLine;




Q-3(binary tree)

You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N

Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.

Sample Output

1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf


Explanation

The Binary Tree below illustrates the sample:



-- ========================
--       Explanation
-- ========================

-- 'CASE' goes through conditions and return a value when the first condition is met (like an IF-ELSE statement). So, once a condition is true, it will stop reading and return the result.
-- If no conditions are true, it will return the value in the ELSE clause.
-- If there is no ELSE part and no conditions are true, it returns NULL.

-- CONCAT() function adds two or more expressions together






SELECT
CASE
    WHEN P IS NULL
        THEN CONCAT(N, ' Root')
    WHEN N IN (SELECT DISTINCT P FROM BST)
        THEN CONCAT(N, ' Inner')
    ELSE CONCAT(N, ' Leaf')
END
FROM BST
ORDER BY N ASC;








